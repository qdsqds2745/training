<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.training.dao.GameUserAccountsDao">

    <resultMap type="com.training.entity.GameUserAccountsEntity" id="gameUserAccountsMap">
        <result property="id" column="id"/>
        <result property="gameUserId" column="game_user_id"/>
        <result property="coin" column="coin"/>
        <result property="moneyToPay" column="money_to_pay"/>
        <result property="gmtModified" column="gmt_modified"/>
        <result property="gmtCreate" column="gmt_create"/>
        <result property="balance" column="balance"/>
    </resultMap>

	<select id="queryObject" resultType="com.training.entity.GameUserAccountsEntity">
		select
			`id`,
			`game_user_id`,
			`coin`,
			`money_to_pay`,
			`gmt_modified`,
			`gmt_create`,
			`balance`
		from game_user_accounts
		where id = #{id}
	</select>

	<select id="queryList" resultType="com.training.entity.GameUserAccountsEntity">
		select
    		`id`,
    		`game_user_id`,
    		`coin`,
    		`money_to_pay`,
    		`gmt_modified`,
    		`gmt_create`,
    		`balance`
		from game_user_accounts
		WHERE 1=1
		<if test="name != null and name.trim() != ''">
			AND name LIKE concat('%',#{name},'%')
		</if>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from game_user_accounts
		WHERE 1=1
        <if test="name != null and name.trim() != ''">
            AND name LIKE concat('%',#{name},'%')
        </if>
	</select>
	 
	<insert id="save" parameterType="com.training.entity.GameUserAccountsEntity" useGeneratedKeys="true" keyProperty="id">
		insert into game_user_accounts(
			`game_user_id`,
			`coin`,
			`money_to_pay`,
			`gmt_modified`,
			`gmt_create`,
			`balance`)
		values(
			#{gameUserId},
			#{coin},
			#{moneyToPay},
			#{gmtModified},
			#{gmtCreate},
			#{balance})
	</insert>
	 
	<update id="update" parameterType="com.training.entity.GameUserAccountsEntity">
		update game_user_accounts 
		<set>
			<if test="gameUserId != null">`game_user_id` = #{gameUserId}, </if>
			<if test="coin != null">`coin` = #{coin}, </if>
			<if test="moneyToPay != null">`money_to_pay` = #{moneyToPay}, </if>
			<if test="gmtModified != null">`gmt_modified` = #{gmtModified}, </if>
			<if test="gmtCreate != null">`gmt_create` = #{gmtCreate}, </if>
			<if test="balance != null">`balance` = #{balance}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from game_user_accounts where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from game_user_accounts where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>